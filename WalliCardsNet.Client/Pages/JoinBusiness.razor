@page "/join/{token}"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using WalliCardsNet.ClassLibrary
@using WalliCardsNet.ClassLibrary.Card
@using WalliCardsNet.ClassLibrary.Customer
@using WalliCardsNet.Client.Models
@inject WalliCardsApiService WalliCardsApiService
@inject HttpClient Http


<h3>JoinBusiness</h3>
@if (Business != null && CardTemplate != null)
{
    <p>Join @Business.Name</p>
    <EditForm Model="@JoinFormModel" OnValidSubmit="Submit"
              style="@GenerateStyleString()">
        <DataAnnotationsValidator/>
        @foreach (var field in CardTemplate.CardFields)
        {
            <div>
                <label>@field.Label</label>
                @{var formField = FormData.FirstOrDefault(x => x.FieldName == field.FieldName);}

                @if (formField != null)
                {
                    @switch (field.FieldType)
                    {
                        case "text":
                            <InputText @bind-Value="formField.FieldData" />
                            break;
                        case "email":
                            <InputText @bind-Value="formField.FieldData" type="email"></InputText>
                            break;
                        default:
                            <p>Unsupported field type: @field.FieldType</p>
                            break;
                    }
                }
                else
                {
                <p>No data found for this field.</p>
                }
            </div>
        }
        <button type="submit">Join</button>
    </EditForm>
}
else
{
    <p>@ErrorMessage</p>
}

@code {
    [Parameter]
    public string Token { get; set; }
    public PublicBusinessTokenDTO Business {get; set;}
    public JoinFormModel JoinFormModel { get; set; } = new JoinFormModel();
    public List<JoinFormData> FormData { get; set; } = new List<JoinFormData>();
    public Dictionary<string, string> CssOptions { get; set; } = new Dictionary<string, string>();
    public CardDesign CardTemplate {get; set;} = new CardDesign();
    public string SuccessMessage { get; set; }
    public string ErrorMessage { get; set; }
    public bool Fetching = false;

    protected override async Task OnInitializedAsync()
    {
        Fetching = true;
        var businessResponse = await WalliCardsApiService.GetByTokenAsync<PublicBusinessTokenDTO>("business", Token);
        if (businessResponse.IsSuccess)
        {
            Business = businessResponse.Data;
        }
        else
        {
            ErrorMessage = businessResponse.Message;
        }
        var cardTemplateResponse = await WalliCardsApiService.GetByTokenAsync<CardResponseDTO>("cardtemplate", Token);
        if (cardTemplateResponse.IsSuccess)
        {
            CardTemplate = JsonSerializer.Deserialize<CardDesign>(cardTemplateResponse.Data.DesignJson);
            foreach (var field in CardTemplate.CardFields)
            {
                FormData.Add(new JoinFormData { FieldName = field.FieldName });
            }
            CssOptions = CardTemplate.CssOptions;
        }
        else
        {
            Console.WriteLine("Error fetching card template");
        }
        Fetching = false;
        StateHasChanged();
    }

    public async Task Submit()
    {
        JoinFormModel.BusinessToken = Token;
        var customerDetails = FormData.ToDictionary(f => f.FieldName, f => (object)f.FieldData);
        JoinFormModel.FormDataJson = JsonSerializer.Serialize(customerDetails);
        var response = await WalliCardsApiService.PostAsync<JoinFormModel>("customer/join", JoinFormModel);
        if (response.IsSuccess)
        {
            Console.WriteLine("success");
        }
        else
        {
            Console.WriteLine($"Error: {response.Message}");
        }
    }

    private string GenerateStyleString()
    {
        return string.Join(";", CssOptions.Select(kvp => $"{kvp.Key}: {kvp.Value}"));
    }

}
