@page "/join/{token}"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using WalliCardsNet.ClassLibrary
@using WalliCardsNet.ClassLibrary.BusinessProfile
@using WalliCardsNet.ClassLibrary.Card
@using WalliCardsNet.ClassLibrary.Customer
@using WalliCardsNet.ClassLibrary.Services
@using WalliCardsNet.Client.Components.Business
@using WalliCardsNet.Client.Models
@inject WalliCardsApiService WalliCardsApiService
@inject IClassLibraryBusinessProfilesService BusinessProfilesService
@inject HttpClient Http

@if (!Fetching && string.IsNullOrEmpty(SuccessMessage) && BusinessProfile != null && Fields != null && CssOptions != null && CssOptions.ContainsKey("background-color") && CssOptions.ContainsKey("color"))
{
    <div style="display: flex; flex-direction: column; align-items: center;">
        <JoinForm BusinessName="@Business.Name"
                  BackgroundColor="@CssOptions[key:"background-color"]"
                  TextColor="@CssOptions[key:"color"]"
                  BusinessProfile="@BusinessProfile"
                  FormData="@FormData"
                  Fields="@Fields"
                  PreviewLogo="false"
                  PreviewHeroImage="false"></JoinForm>
        <button @onclick="Submit" style="height: 40px; width: 240px; margin-top: 2rem;" class=" btn btn-primary">Join</button>
    </div>

}

@if (Fetching)
{
    <p>Fetching data...</p>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <p>@SuccessMessage</p>
    <br />

    @* Add to Google Wallet button *@
    @if (!string.IsNullOrEmpty(_googleLink))
    {
        <a href="@_googleLink">
            <img src="enUS_add_to_google_wallet_wallet-button.png" />
        </a>
    }
    else
    {
        <p>Something went wrong when generating the Add to Google Wallet link!</p>
    }

}
@if (!BusinessProfileExists && Business != null)
{
    <div style="background-color: aquamarine; padding-inline: 3rem; padding-block: 6rem; display: flex; flex-direction: column; align-items: center;">
        <p>@Business.Name hasn't configured this link yet. Check back later!</p>
    </div>

}


@code {
    [Parameter]
    public string Token { get; set; }
    public PublicBusinessTokenDTO Business {get; set;}
    public JoinFormModel JoinFormModel { get; set; } = new JoinFormModel();
    public List<JoinFormData> FormData { get; set; } = new List<JoinFormData>();
    public Dictionary<string, string> CssOptions { get; set; } = new Dictionary<string, string>();
    public List<CardField> Fields { get; set; } = new List<CardField>();
    public CardDesign CardTemplate {get; set;} = new CardDesign();
    public BusinessProfileRequestDTO BusinessProfile { get; set; } = new BusinessProfileRequestDTO();
    public string SuccessMessage { get; set; } = "";
    public string ErrorMessage { get; set; }
    public bool Fetching = false;
    public bool BusinessProfileExists = false;
    private string? _googleLink;

    public List<bool> CheckboxValues { get; set; } = new List<bool>();
    public List<DateTime> DateValues { get; set; } = new List<DateTime>();

    protected override async Task OnParametersSetAsync()
    {
        Fetching = true;
        var businessResponse = await WalliCardsApiService.GetByTokenAsync<PublicBusinessTokenDTO>("business", Token);
        if (businessResponse.IsSuccess)
        {
            Business = businessResponse.Data;
        }
        else
        {
            ErrorMessage = businessResponse.Message;
        }
        var businessProfileResponse = await WalliCardsApiService.GetByTokenAsync<BusinessProfileResponseDTO>("businessprofile", Token);
        if (businessProfileResponse.IsSuccess)
        {
            BusinessProfileExists = true;
            var businessProfileResponseDTO = businessProfileResponse.Data;
            BusinessProfile = BusinessProfilesService.MapResponseDTOToRequestDTO(businessProfileResponseDTO);
            if (BusinessProfile.JoinFormTemplate != null)
            {
                if (BusinessProfile.JoinFormTemplate.CSSOptionsJson != null)
                {
                    CssOptions = JsonSerializer.Deserialize<Dictionary<string, string>>(BusinessProfile.JoinFormTemplate.CSSOptionsJson);
                }

                if (BusinessProfile.JoinFormTemplate.FieldsJson != null)
                {
                    Fields = JsonSerializer.Deserialize<List<CardField>>(BusinessProfile.JoinFormTemplate.FieldsJson);
                    foreach (var field in Fields)
                    {
                        FormData.Add(new JoinFormData{FieldName = field.FieldName, FieldData = "" });
                    }
                }
            }
        }
        else
        {
            BusinessProfileExists = false;
        }
        Fetching = false;
        StateHasChanged();
    }

    public async Task Submit()
    {
        JoinFormModel.BusinessToken = Token;
        ErrorMessage = "";
        bool hasError = false;
        for (int i = 0; i < Fields.Count; i++)
        {
            var field = Fields[i];
            var formField = FormData.FirstOrDefault(x => x.FieldName == field.FieldName);

            if (field.FieldType == "date" && formField != null)
            {
                DateTime date;
                if (DateTime.TryParse(formField.FieldData, out date))
                {
                    string formattedDate = date.ToString("yyyy-MM-dd");
                    formField.FieldData = formattedDate;
                }
                else
                {
                    formField.FieldData = DateTime.Now.ToString("yyyy-MM-dd");
                }
            }
            if (field.FieldType == "number" && formField != null)
            {
                if (!decimal.TryParse(formField.FieldData, out _))
                {
                    ErrorMessage = $"{formField.FieldName} must be a number.";
                    formField.FieldData = string.Empty;
                    hasError = true;
                    break;
                }
            }
        }

        if (hasError)
        {
            return;
        }

        var customerDetails = FormData.ToDictionary(f => f.FieldName, f => (object)f.FieldData);
        JoinFormModel.FormDataJson = JsonSerializer.Serialize(customerDetails);

        foreach (var entry in customerDetails)
        {
            Console.WriteLine($"Key: {entry.Key} Value: {entry.Value}");
        }
        Console.WriteLine($"FormDataJson: {JoinFormModel.FormDataJson}");

        var response = await WalliCardsApiService.PostAsync<JoinFormModel, string>("customer/join", JoinFormModel);
        if (response.IsSuccess)
        {
            _googleLink = response.Data;
            SuccessMessage = $"Welcome to {Business.Name}!";
            Console.WriteLine("success");
        }
        else
        {
            Console.WriteLine($"Error: {response.Message}");
        }
    }
}
