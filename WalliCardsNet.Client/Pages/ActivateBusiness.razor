@page "/activate/{token:guid}"
@using WalliCardsNet.ClassLibrary.ApplicationUser
@inject WalliCardsApiService WalliCardsApiService

@if (IsValidToken)
{
    @if (!Success)
    {
        <EditForm Model="User" OnSubmit="Submit">
            <div class="flex flex-col max-w-lg sm:w-1/3 mx-auto gap-2 py-2">
                <h1 class="font-bold text-xl">Set your password</h1>
                <div>
                    <InputText class="px-3 py-2 rounded-lg shadow-lg w-full focus:ring ring-cyan-100 border" placeholder="Enter a password" @bind-Value="User.Password" type="password"></InputText>
                </div>
                <div>
                    <InputText class="px-3 py-2 rounded-lg shadow-lg w-full focus:ring ring-cyan-100 border" placeholder="Confirm password" @bind-Value="ConfirmPassword" type="password"></InputText>
                </div>
                <button type="submit" class="font-bold rounded-md shadow-md text-gray-50 bg-teal-300 py-3 px-4 hover:bg-teal-400 active:bg-teal-200 transition">Activate Account</button>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <p class="text-danger">@ErrorMessage</p>
                }
            </div>
        </EditForm>
        
    }
    else
    {
        <div class="flex flex-col max-w-lg sm:w-1/3 mx-auto gap-2 py-2">
            <p>Password set! You can now <NavLink class="text-bold" href="/login">log in</NavLink>.</p>
        </div>
    }
}
else
{
    <div class="flex flex-col max-w-lg sm:w-1/3 mx-auto gap-2 py-2">
        <p>Invalid or expired link.</p>
    </div>
}


@code {
    [Parameter]
    public Guid Token { get; set; }

    public ApplicationUserDTO User { get; set; } = new ApplicationUserDTO();

    public string ConfirmPassword { get; set; } = "";

    public string ErrorMessage { get; set; } = "";
    public bool IsValidToken { get; set; } = false;
    public bool Success { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await WalliCardsApiService.GetByIdAsync<ApplicationUserDTO>($"user", Token);
        if (result.IsSuccess)
        {
            IsValidToken = true;
            User = result.Data;
        }
    }

    public async Task Submit()
    {
        if (ConfirmPassword == User.Password)
        {
            var result = await WalliCardsApiService.PutAsync<ApplicationUserDTO>($"user/set-password", User);
            if (result.IsSuccess == false)
            {
                ErrorMessage = "Something went wrong.";
            }
            else
            {
                Success = true;
                StateHasChanged();
            }
        }
        else
        {
            ErrorMessage = "Passwords do not match.";
        }
    }
}
