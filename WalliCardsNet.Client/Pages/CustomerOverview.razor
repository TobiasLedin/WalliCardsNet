@using Microsoft.AspNetCore.Authorization
@using WalliCardsNet.ClassLibrary.Customer
@using WalliCardsNet.Client.Components.Customer

@page "/customers"
@inject WalliCardsApiService ApiService
@inject AuthStateProvider AuthStateProvider
@attribute [Authorize]

<h3>Customer Overview</h3>

@if (Isloading == true)
{
    <p>Loading data</p>
}

@if (Isloading == false && DataLoadErrorMessage == null)
{
    @* Component to customize table appearance *@
    <EditTable Columns="TableColumns" OnColumnsUpdated="UpdateColumns" />

    if (TableColumns != null)
    {
        @* Customer details table *@
        <QuickGrid Items="FilteredCustomers" Pagination="@pagination" Class="table">

            @* Edit column *@
            <TemplateColumn>
                <button @onclick="() => OnShowModalClick(context)">Edit</button>
            </TemplateColumn>

            @* Customer detail columns *@
            @foreach (var column in TableColumns)
            {
                <PropertyColumn Title="@(column)"
                                Property="@(c => c.CustomerDetails!.ContainsKey(column) ? c.CustomerDetails[column] : "-")"
                                Sortable="true">

                    @* Column filter *@
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="_columnFilters[column]" @bind:event="oninput" placeholder="Filter on @column" />
                        </div>
                    </ColumnOptions>

                </PropertyColumn>
            }

        </QuickGrid>

        @* QuickGrid pagination *@
        <Paginator State="@pagination" />
    }

    @* Blazor Bootstrap modal start - Edit customer details *@
    <Modal @ref="_modal" title="Customer details" IsVerticallyCentered="true">
        <BodyTemplate>

            <div>
                @* List all available business columns and corresponding CustomerDetails value. *@
                @foreach (var column in TableColumns)
                {
                    <label>@column</label>
                    <InputText @bind-Value="@_editableCustomerDetails[column]" maxlength="30" />
                    <br />
                }
                <br />

                @* List all additional CustomerDetails stored, but not matching a business column *@
                @if (_hasAdditionalData)
                {
                    <span>Additional stored data</span>
                    <br />
                    @foreach (var key in _editableCustomerDetails.Keys.ToList())
                    {
                        if (!TableColumns.Contains(key))
                        {
                            <label>@key</label>
                            <InputText @bind-Value="_editableCustomerDetails[key]" maxlength="30" />
                            <br />
                        }
                    }
                }
            </div>

        </BodyTemplate>
        <FooterTemplate>
            @if (DataStoreStatusMessage != null)
            {
                @* Status message as returned from ApiService Put method *@
                <span>@DataStoreStatusMessage</span>
            }
            <button @onclick="OnHideModalClick">Close</button>
            <button @onclick="SaveChanges">Save</button>
        </FooterTemplate>
    </Modal>
    @* Blazor Bootstrap modal end *@

}
else
{
    @DataLoadErrorMessage
}


@code {
    private BusinessResponseDTO? _business;
    public List<string> TableColumns { get; set; }
    public bool Isloading { get; set; } = true;
    public string? DataLoadErrorMessage { get; set; }
    public string? DataStoreStatusMessage { get; set; }

    //QuickGrid
    public IQueryable<CustomerDTO> Customers { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    private Dictionary<string, string> _columnFilters = new();
    private IQueryable<CustomerDTO> FilteredCustomers => GetFilteredCustomers();

    //TODO: Blazor Bootstrap modal
    private Modal _modal = default!;
    private CustomerDTO? _selectedCustomer;
    private CustomerDTO? _editedCustomer;
    private bool _hasAdditionalData = false;
    private Dictionary<string, string>? _editableCustomerDetails = new Dictionary<string, string>();
    //

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var businessIdClaim = user.FindFirst("business-id");

                if (businessIdClaim != null)
                {
                    var businessId = Guid.Parse(businessIdClaim.Value);

                    await GetBusinessAsync(businessId); //TODO: Flytta kontroll av BusinessID till API / BusinessController (med hjälp av access token).
                    await GetCustomersAsync();
                    UpdateColumnFilterKeys();

                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            DataLoadErrorMessage = "Failed to load customer data";
        }
        finally
        {
            Isloading = false;
        }
    }

    //TODO: Blazor Bootstrap modal
    private async Task OnShowModalClick(CustomerDTO customer)
    {
        _selectedCustomer = customer;
        _editableCustomerDetails = new Dictionary<string, string>(customer.CustomerDetails);

        // Ensure all TableColumns are present in _editableCustomerDetails
        foreach (var column in TableColumns)
        {
            if (!_editableCustomerDetails.ContainsKey(column))
            {
                _editableCustomerDetails[column] = string.Empty;
            }
        }

        _hasAdditionalData = customer.CustomerDetails.Keys.Any(key => !TableColumns.Contains(key));

        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        _selectedCustomer = null;
        _hasAdditionalData = false;
        DataStoreStatusMessage = null;
        await _modal.HideAsync();
    }

    private async void SaveChanges()
    {
        _editedCustomer = _selectedCustomer with { CustomerDetails = new Dictionary<string, string>(_editableCustomerDetails) };

        var result = await ApiService.PutAsync("Customer", _editedCustomer);
        DataStoreStatusMessage = result.Message;

        await GetCustomersAsync();

        StateHasChanged();
    }
    //

    private async Task UpdateColumns(List<string> updatedColumns)
    {
        var columnsArray = updatedColumns.ToArray<string>();

        if (_business != null)
        {
            var businessDTO = new BusinessRequestDTO(_business.Id, null, columnsArray);
            var response = await ApiService.PutAsync<BusinessRequestDTO>("Business", businessDTO);

            if (response.IsSuccess)
            {
                TableColumns = updatedColumns;

                UpdateColumnFilterKeys();
            }
            else
            {
                DataLoadErrorMessage = "Failed to save updates to database";
            }
        }

        StateHasChanged();
    }

    private async Task GetBusinessAsync(Guid businessId)
    {
        var businessResponse = await ApiService.GetByIdAsync<BusinessResponseDTO>("business", businessId);

        if (businessResponse.IsSuccess)
        {
            _business = businessResponse.Data;
            TableColumns = _business.ColumnPreset.ToList<string>();
        }
    }

    private async Task GetCustomersAsync()
    {
        var customerResponse = await ApiService.GetAllAsync<List<CustomerDTO>>("customer");

        if (customerResponse.IsSuccess)
        {
            var data = customerResponse.Data;
            Customers = data.AsQueryable();
        }
    }

    private IQueryable<CustomerDTO> GetFilteredCustomers()
    {
        return Customers.Where(c => TableColumns.All(column =>
            string.IsNullOrWhiteSpace(_columnFilters.GetValueOrDefault(column)) ||
            c.CustomerDetails.GetValueOrDefault(column, "").Contains(_columnFilters[column], StringComparison.OrdinalIgnoreCase) == true));
    }

    private void UpdateColumnFilterKeys()
    {
        foreach (var column in TableColumns)
        {
            if (!_columnFilters.ContainsKey(column))
            {
                _columnFilters.Add(column, "");
            }
        }
    }

}
