@using System.Text
@using WalliCardsNet.ClassLibrary.Customer
@using WalliCardsNet.Client.Components.Customer

@page "/customers"
@inject WalliCardsApiService ApiService
@inject AuthStateProvider AuthStateProvider
@inject IJSRuntime JS

<h3>Customer Overview</h3>

@* @if (Isloading == true && TableColumns == null)
{
    <p>Loading business settings</p>
}

@if (Isloading == true && Columns.Count > 0)
{
    <p>Loading customer data</p>
} *@

@if (Isloading == true)
{
    <p>Loading data</p>
}

@if (Isloading == false && ErrorMessage == null)
{
    <button class="btn btn-primary" @onclick="ExportCustomers">Export as CSV</button>
    <EditTable Columns="TableColumns" OnColumnsUpdated="UpdateColumns" />

    if (TableColumns != null)
    {
        <QuickGrid Items="Customers" Class="table">

            @foreach (var column in TableColumns)
            {

                <PropertyColumn Title="@(column)"
                                Property="@(c => c.CustomerDetails!.ContainsKey(column) ? c.CustomerDetails[column] : "-")"
                                Sortable="true" />

            }

        </QuickGrid>
    }

}
else
{
    @ErrorMessage
}


@code {
    private BusinessResponseDTO? Business { get; set; }
    public List<string> TableColumns { get; set; }
    public IQueryable<CustomerResponseDTO> Customers { get; set; }
    public bool Isloading { get; set; } = true;
    public string? ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var businessIdClaim = user.FindFirst("business-id");

                if (businessIdClaim != null)
                {
                    var businessId = Guid.Parse(businessIdClaim.Value);
                    var businessResponse = await ApiService.GetByIdAsync<BusinessResponseDTO>("business", businessId);

                    if (businessResponse.IsSuccess)
                    {
                        Business = businessResponse.Data; //TODO: Fixa så att enbart TableColumns hämtas, ej hela Business objektet ???
                        TableColumns = Business.ColumnPreset.ToList<string>();
                        StateHasChanged();
                    }

                    var customerResponse = await ApiService.GetAllAsync<List<CustomerResponseDTO>>("customer");

                    if (customerResponse.IsSuccess)
                    {
                        var data = customerResponse.Data;
                        Customers = data.AsQueryable();
                    }
                }
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load customer data";
        }
        finally
        {
            Isloading = false;
        }
    }

    private async Task UpdateColumns(List<string> updatedColumns)
    {
        var columnsArray = updatedColumns.ToArray<string>();

        if (Business != null)
        {
            var businessDTO = new BusinessRequestDTO(Business.Id, null, columnsArray);
            var response = await ApiService.PutAsync<BusinessRequestDTO>("Business", businessDTO);

            if (response.IsSuccess)
            {
                TableColumns = updatedColumns;
            }
            else
            {
                ErrorMessage = "Failed to save updates to database";
            }
        }

        StateHasChanged();
    }

    private string ConvertToCsv(IEnumerable<CustomerResponseDTO> customers)
    {
        var csvBuilder = new StringBuilder();
        var allHeaders = new HashSet<string>();

        foreach (var customer in customers)
        {
            foreach (var key in customer.CustomerDetails.Keys)
            {
                allHeaders.Add(key);
            }
        }

        csvBuilder.AppendLine(string.Join(",", allHeaders));

        foreach (var customer in customers)
        {
            var row = new List<string>();
            foreach (var header in allHeaders)
            {
                customer.CustomerDetails.TryGetValue(header, out var value);
                row.Add(value ?? string.Empty);
            }
            csvBuilder.AppendLine(string.Join(",", row));
        }
        return csvBuilder.ToString();
    }

    private async Task ExportCustomers()
    {
        var csvData = ConvertToCsv(Customers);
        var bytes = System.Text.Encoding.UTF8.GetBytes(csvData);
        var base64 = Convert.ToBase64String(bytes);

        await JS.InvokeVoidAsync("saveAsFile", "customers.csv", base64);
    }
}
