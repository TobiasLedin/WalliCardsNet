@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using WalliCardsNet.ClassLibrary.BusinessProfile
@using WalliCardsNet.ClassLibrary.Card
@using WalliCardsNet.ClassLibrary.Services
@using WalliCardsNet.Client.Models
@using WalliCardsNet.Client.Components.PassDesigner
@using Blazored.LocalStorage
@page "/card/{token}"
@attribute [Authorize]
@inject WalliCardsApiService WalliCardsApiService;
@inject IClassLibraryBusinessProfilesService BusinessProfilesService;
@inject AuthStateProvider AuthStateProvider;
@inject ILocalStorageService _localStorage;



@if(Business != null)
{
    @if (BusinessProfiles != null && BusinessProfiles.Count > 0)
    {
        <div style="border-bottom: 1px solid black; margin-bottom: 1rem; padding-bottom: 0.4rem;">
            <div>
                <p>Select existing profile to edit</p>
                <InputSelect @bind-Value="SelectedBusinessProfileId" @bind-Value:after="OnBusinessProfileChange">
                    @{
                        int i = 1;
                    }
                    @foreach (var profile in BusinessProfiles)
                    {
                        <option value="@profile.Id">Profile @i @(profile.IsActive ? "(Active)" : "")</option> 
                        i++;
                    }
                    @if (SelectedBusinessProfileId == Guid.Empty)
                    {
                    <option value="@Guid.Empty">New profile</option>
                    }
                </InputSelect>
                @if (SelectedBusinessProfileId != Guid.Empty && !SelectedBusinessProfile.IsActive && IsManager)
                {
                    @if (TimeOfLastSetActiveRequest > DateTime.UtcNow.AddMinutes(-10))
                    {
                        <button class="btn btn-secondary" disabled>Set as active profile</button>
                        <p>Can't set a new profile as active until @TimeOfLastSetActiveRequest.AddMinutes(10).ToLocalTime().ToString("HH:mm").</p>
                    }
                    else
                    {
                        <button @onclick="SetActiveProfile" class="btn btn-primary">Set as active profile</button>
                    }
                }
            </div>
            <button @onclick="NewProfile" class="btn btn-primary">New profile</button>
        </div>


    }
    <div class="col">
        <button class="btn btn-primary" @onclick='() => SetCurrentView("google")'>Google Pass Designer</button>
        <button class="btn btn-primary" @onclick='() => SetCurrentView("join")'>Join Form Designer</button>
    </div>
    @if (CurrentView == "google" && Message != "Successfully added business profile.")
    {
        <GooglePassDesigner BusinessProfile="@BusinessProfile"
                            BusinessName="@Business.Name"></GooglePassDesigner>
        @if (SelectedBusinessProfileId == Guid.Empty)
        {
            <button @onclick="Create">Create</button>
        }
        else
        {
            <button @onclick="Update">Update</button>
        }
    }

    @if (CurrentView == "join" && Message != "Successfully added business profile.")
    {
        <JoinFormDesigner Token="@Token"
                          BusinessProfile="@BusinessProfile"
                          BusinessName="@Business.Name"></JoinFormDesigner>
        @if (SelectedBusinessProfileId == Guid.Empty)
        {
            <button @onclick="Create">Create</button>
        }
        else
        {
            <button @onclick="Update">Update</button>
        }
    }

    else if (CurrentView == "old")
    {
        <h3>CardDesigner</h3>
    }

    @if (!string.IsNullOrEmpty(Message))
    {
        <p>@Message</p>
    }
}

@code {
    [Parameter]
    public string Token { get; set; }

    public string CurrentView { get; set; } = "google";

    public BusinessDTO Business { get; set; } = new BusinessDTO();
    public BusinessProfileRequestDTO BusinessProfile { get; set; } = new BusinessProfileRequestDTO();
    public List<BusinessProfileResponseDTO> BusinessProfiles { get; set; } = new List<BusinessProfileResponseDTO>();

    public Guid SelectedBusinessProfileId { get; set; }
    public BusinessProfileResponseDTO SelectedBusinessProfile => BusinessProfiles.FirstOrDefault(profile => profile.Id == SelectedBusinessProfileId);

    public string Message { get; set; } = "";

    public bool IsManager { get; set; } = false;

    public DateTime TimeOfLastSetActiveRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var role = authState.User.FindFirst(ClaimTypes.Role)?.Value ?? "Unknown";
        IsManager = role == "Manager";
        var response = await WalliCardsApiService.GetByTokenAsync<BusinessDTO>("business", Token);
        if (response.IsSuccess)
        {
            Business = response.Data;
        }
        TimeOfLastSetActiveRequest = await _localStorage.GetItemAsync<DateTime>("lastRequest-SetActiveProfile");
        await FetchBusinessProfiles();
    }

    public void SetCurrentView(string newView)
    {
        CurrentView = newView;
        StateHasChanged();
    }

    public async Task Create()
    {
        if (BusinessProfile.GooglePassTemplate == null)
        {
            Message = "Google Pass template incomplete.";
        }
        if (BusinessProfile.JoinFormTemplate == null)
        {
            Message = "Join Form template incomplete.";
        }
        if (string.IsNullOrEmpty(BusinessProfile.GooglePassTemplate.FieldsJson))
        {
            Message = "Google Pass rows/fields can not be empty";
            Console.WriteLine("Rows/fields error");
        }
        if (BusinessProfile.GooglePassTemplate != null && BusinessProfile.JoinFormTemplate != null && !string.IsNullOrEmpty(BusinessProfile.GooglePassTemplate.FieldsJson))
        {
            var response = await WalliCardsApiService.PostAsync<BusinessProfileRequestDTO>("businessprofile/create", BusinessProfile);
            if (response.IsSuccess)
            {
                Message = string.IsNullOrEmpty(response.Message) ? "Successfully added business profile." : response.Message;
            }
        }
    }

    public async Task Update()
    {
        var response = await WalliCardsApiService.PutAsync<BusinessProfileRequestDTO>("businessprofile", BusinessProfile);
        if (response.IsSuccess)
        {
            Message = string.IsNullOrEmpty(response.Message) ? "Successfully added business profile." : response.Message;
        }
    }

    private void OnBusinessProfileChange()
    {
        BusinessProfile = BusinessProfilesService.MapResponseDTOToRequestDTO(BusinessProfiles.FirstOrDefault(x => x.Id == SelectedBusinessProfileId));
        StateHasChanged();
    }

    private void NewProfile()
    {
        BusinessProfile = new BusinessProfileRequestDTO();
        SelectedBusinessProfileId = Guid.Empty;
        StateHasChanged();
    }

    private async Task FetchBusinessProfiles()
    {
        var businessProfilesResponse = await WalliCardsApiService.GetAllAsync<List<BusinessProfileResponseDTO>>("businessprofile/all");
        if (businessProfilesResponse.IsSuccess)
        {
            BusinessProfiles = businessProfilesResponse.Data.OrderBy(x => x.DateCreated).ToList();
            if (BusinessProfiles.Count > 0)
            {
                SelectedBusinessProfileId = BusinessProfiles.FirstOrDefault(x => x.IsActive)?.Id
                                   ?? BusinessProfiles.FirstOrDefault().Id;
                BusinessProfile = BusinessProfilesService.MapResponseDTOToRequestDTO(BusinessProfiles.FirstOrDefault(x => x.Id == SelectedBusinessProfileId));
            }
        }
        StateHasChanged();
    }

    public async Task SetActiveProfile()
    {
        var response = await WalliCardsApiService.PutAsync<Guid>($"businessprofile/set-active/{SelectedBusinessProfileId}", SelectedBusinessProfileId);
        var timeOfRequest = DateTime.UtcNow;
        await _localStorage.SetItemAsync<DateTime>("lastRequest-SetActiveProfile", timeOfRequest);
        TimeOfLastSetActiveRequest = timeOfRequest;
        await FetchBusinessProfiles();
    }
}
