@using Microsoft.AspNetCore.Authorization
@using WalliCardsNet.ClassLibrary.BusinessProfile
@using WalliCardsNet.ClassLibrary.Card
@using WalliCardsNet.ClassLibrary.Services
@using WalliCardsNet.Client.Models
@using WalliCardsNet.Client.Components.PassDesigner
@page "/card/{token}"
@attribute [Authorize]
@inject WalliCardsApiService WalliCardsApiService;
@inject IBusinessProfilesService BusinessProfilesService;


@if(Business != null)
{
    @if (BusinessProfiles != null && BusinessProfiles.Count > 0)
    {
        <InputSelect @onchange="OnBusinessProfileChange" TValue="Guid" @bind-Value="SelectedBusinessProfileId">
            @{
                int i = 1;
            }
            @foreach (var profile in BusinessProfiles)
            {
                <option value="@profile.Id">Profile @i @(profile.IsActive ? "(Active)" : "")</option>
                i++;
            }
        </InputSelect>
    }
    <div class="col">
        <button class="btn btn-primary" @onclick='() => SetCurrentView("google")'>Google Pass Designer</button>
        <button class="btn btn-primary" @onclick='() => SetCurrentView("join")'>Join Form Designer</button>
    </div>
    @if (CurrentView == "google" && string.IsNullOrEmpty(Message))
    {
        <GooglePassDesigner BusinessProfile="@BusinessProfile"
                            BusinessName="@Business.Name"></GooglePassDesigner>
        <button @onclick="Create">Create</button>
    }

    @if (CurrentView == "join" && string.IsNullOrEmpty(Message))
    {
        <JoinFormDesigner Token="@Token"
                          BusinessProfile="@BusinessProfile"></JoinFormDesigner>
        <button @onclick="Create">Create</button>
    }

    else if (CurrentView == "old")
    {
        <h3>CardDesigner</h3>
    }

    @if (!string.IsNullOrEmpty(Message))
    {
        <p>@Message</p>
    }
}

@code {
    [Parameter]
    public string Token { get; set; }

    public string CurrentView { get; set; } = "google";

    public BusinessDTO Business { get; set; } = new BusinessDTO();
    public BusinessProfileRequestDTO BusinessProfile { get; set; } = new BusinessProfileRequestDTO();
    public List<BusinessProfileResponseDTO> BusinessProfiles { get; set; } = new List<BusinessProfileResponseDTO>();

    public Guid SelectedBusinessProfileId { get; set; }
    public BusinessProfileResponseDTO SelectedBusinessProfile => BusinessProfiles.FirstOrDefault(profile => profile.Id == SelectedBusinessProfileId);


    public string Message { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await WalliCardsApiService.GetByTokenAsync<BusinessDTO>("business", Token);
        if (response.IsSuccess)
        {
            Business = response.Data;
        }
        var businessProfilesResponse = await WalliCardsApiService.GetAllAsync<List<BusinessProfileResponseDTO>>("businessprofile/all");
        if (businessProfilesResponse.IsSuccess)
        {
            BusinessProfiles = businessProfilesResponse.Data;
            if (BusinessProfiles.Count > 0)
            {
                SelectedBusinessProfileId = BusinessProfiles.FirstOrDefault(x => x.IsActive)?.Id
                                   ?? BusinessProfiles.First().Id;
            }
        }
        StateHasChanged();
    }

    public void SetCurrentView(string newView)
    {
        CurrentView = newView;
        StateHasChanged();
    }

    public async Task Create()
    {
        if (BusinessProfile.GooglePassTemplate == null)
        {
            BusinessProfile.GooglePassTemplate = new GooglePassTemplateRequestDTO();
        }
        if (BusinessProfile.JoinFormTemplate == null)
        {
            BusinessProfile.JoinFormTemplate = new JoinFormTemplateRequestDTO();
        }
        var response = await WalliCardsApiService.PostAsync<BusinessProfileRequestDTO>("businessprofile/create", BusinessProfile);
        if (response.IsSuccess)
        {
            Message = string.IsNullOrEmpty(response.Message) ? "Successfully added business profile." : response.Message;
        }
    }

    private void OnBusinessProfileChange(ChangeEventArgs e)
    {
        Console.WriteLine("OnBusinessProfileChange");
        if (Guid.TryParse(e.Value.ToString(), out var selectedId))
        {
            SelectedBusinessProfileId = selectedId;
            BusinessProfile = BusinessProfilesService.MapResponseDTOToRequestDTO(BusinessProfiles.FirstOrDefault(x => x.Id == SelectedBusinessProfileId));
            Console.WriteLine($"Business Profile ID = {BusinessProfile.Id}");
            StateHasChanged();
        }
    }
}
