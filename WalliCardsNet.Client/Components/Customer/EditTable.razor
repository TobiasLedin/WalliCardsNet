
<button @onclick="ToggleEditMenu">
    @* Kugghjulsikon *@
    @(IsCollapsed ? "Edit" : "Close")
</button>

@if (!IsCollapsed)
{


    <button @onclick="ToggleAddField">
        Add
    </button>
    if (ShowAddField)
    {
        <div>
            <input type="text" @bind="NewColumnName" placeholder="Column name" />
            <button @onclick="AddColumn">Save</button>
        </div>
    }


    <table>
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var column in Columns)
            {
                <tr>
                    <td>
                        @column
                        @if (column != "Email")
                        {
                            <b @onclick="(() => DeleteColumn(column))">X</b>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<string> Columns { get; set; }
    [Parameter]
    public EventCallback<List<string>> OnColumnsUpdated { get; set; }
    public string? NewColumnName { get; set; }
    private string? ValidationMessage { get; set; } = null;
    private const int MaxColumnNameLength = 20;
    private bool IsCollapsed { get; set; } = true;
    private bool ShowAddField { get; set; } = false;


    private void ToggleEditMenu()
    {
        IsCollapsed = !IsCollapsed;
    }

    private void ToggleAddField()
    {
        ShowAddField = !ShowAddField;
    }

    private async void AddColumn()
    {
        if (!string.IsNullOrEmpty(NewColumnName))
        {
            ValidationMessage = null;

            if (string.IsNullOrWhiteSpace(NewColumnName))
            {
                ValidationMessage = "Cannot be empty";
            }
            else if (NewColumnName.Length > MaxColumnNameLength)
            {
                ValidationMessage = $"Column name cannot be more than {MaxColumnNameLength} characters";
            }
            else
            {
                Columns.Add(NewColumnName);
                NewColumnName = string.Empty;

                await OnColumnsUpdated.InvokeAsync(Columns);
                ShowAddField = false;
                StateHasChanged();
            }
        }
    }

    private async void DeleteColumn(string column)
    {
        Columns.Remove(column);

        await OnColumnsUpdated.InvokeAsync(Columns);
        StateHasChanged();
    }

}
