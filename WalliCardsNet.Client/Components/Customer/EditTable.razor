
<div>
    @if (IsCollapsed)
    {
        <Icon Name="IconName.Gear" Size="IconSize.x2" @onclick="ToggleEditMenu" />
    }
    else
    {
        <Icon Name="IconName.GearFill" Size="IconSize.x2" @onclick="ToggleEditMenu" />
        <Icon Name="IconName.Plus" Size="IconSize.x2" @onclick="ToggleAddField" />
    }
</div>
@* <Icon Name="IconName.Gear" Size="IconSize.x2" @onclick="ToggleEditMenu" /> *@

@* <button @onclick="ToggleEditMenu">
    @(IsCollapsed ? "Edit table" : "Close")
</button> *@

@if (!IsCollapsed)
{


    @* <button @onclick="ToggleAddField">
        Add
    </button> *@
    if (ShowAddField)
    {
        <div>
            <input type="text" @bind="NewColumnName" placeholder="Input column name..." />
            <button @onclick="AddColumn">Save</button>
        </div>
    }

    @* Blazor Bootstrap sortable list *@
    <SortableList Class="mb-3"
                  Handle=".bb-sortable-list-handle"
                  TItem="string"
                  Data="Columns"
                  Context="column"
                  OnUpdate="@UpdateColumns"
                  Style="width: 260px">

        <ItemTemplate>
            <div class="d-flex justify-content-start">
                <div class="bb-sortable-list-handle pe-2"><Icon Name="IconName.GripVertical" /></div>
                <div>@column</div>
                @if (column != "Email")
                {
                    <div class="ms-auto"><Icon Name="IconName.Trash" @onclick="(() => DeleteColumn(column))" /></div>
                }
                
            </div>
        </ItemTemplate>

    </SortableList>

    @* <table>
        <thead>
            <tr>
                <th>Column</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var column in Columns)
            {
                <tr>
                    <td>
                        @column
                        @if (column != "Email")
                        {
                            <Icon Name="IconName.Trash" @onclick="(() => DeleteColumn(column))" />
                            <b @onclick="(() => DeleteColumn(column))"> X</b>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table> *@
}

@code {
    [Parameter]
    public List<string> Columns { get; set; }
    [Parameter]
    public EventCallback<List<string>> OnColumnsUpdated { get; set; }
    public string? NewColumnName { get; set; }
    private string? ValidationMessage { get; set; } = null;
    private const int MaxColumnNameLength = 20;
    private bool IsCollapsed { get; set; } = true;
    private bool ShowAddField { get; set; } = false;

    public record Column(string Name);


    private void ToggleEditMenu()
    {
        IsCollapsed = !IsCollapsed;
    }

    private void ToggleAddField()
    {
        ShowAddField = !ShowAddField;
    }

    private async void AddColumn()
    {
        if (!string.IsNullOrEmpty(NewColumnName))
        {
            ValidationMessage = null;

            if (string.IsNullOrWhiteSpace(NewColumnName))
            {
                ValidationMessage = "Cannot be empty";
            }
            else if (NewColumnName.Length > MaxColumnNameLength)
            {
                ValidationMessage = $"Column name cannot be more than {MaxColumnNameLength} characters";
            }
            else
            {
                Columns.Add(NewColumnName);
                NewColumnName = string.Empty;

                await OnColumnsUpdated.InvokeAsync(Columns);
                ShowAddField = false;
                StateHasChanged();
            }
        }
    }

    private async Task UpdateColumns(SortableListEventArgs args)
    {
        var columnToMove = Columns[args.OldIndex];
        Columns.RemoveAt(args.OldIndex);

        if(args.NewIndex < Columns.Count)
        {
            Columns.Insert(args.NewIndex, columnToMove);
        }
        else
        {
            Columns.Add(columnToMove);
        }

        await OnColumnsUpdated.InvokeAsync(Columns);
        StateHasChanged();

    }

    private async Task DeleteColumn(string column)
    {
        Columns.Remove(column);

        await OnColumnsUpdated.InvokeAsync(Columns);
        StateHasChanged();
    }

}
