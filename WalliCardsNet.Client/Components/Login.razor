@using System.ComponentModel.DataAnnotations
@using WalliCardsNet.ClassLibrary
@using WalliCardsNet.Client.Models
@using WalliCardsNet.Client.Services
@inject NavigationManager NavigationManager

@inject ClientAuthService authService;

<EditForm Model="Credentials" OnValidSubmit="LoginAsync" FormName="LoginForm">
    <div class="mx-auto flex max-w-lg flex-col gap-2 px-8 py-2">
        <h1 class="text-lg font-bold">Log in</h1>
        <DataAnnotationsValidator />
        <div class="w-full text-center">
            <Icon Name="IconName.Envelope" Size="IconSize.x3"></Icon>
            <InputText class="w-full rounded-lg border px-3 py-2 tracking-wide shadow-lg ring-cyan-100 focus:ring" @bind-Value="Credentials.Email" placeholder="Email" />
            <ValidationMessage For="@(() => Credentials.Email)" />
        </div>
        <div class="w-full text-center">
            <label><Icon Name="IconName.Lock" Size="IconSize.x3"></Icon></label>
            <InputText class="w-full rounded-lg border px-3 py-2 tracking-wide shadow-lg ring-cyan-100 focus:ring" @bind-Value="Credentials.Password" placeholder="Password" type="password" />
            <ValidationMessage For="@(() => Credentials.Password)" />
        </div>
        <div class="mx-auto flex w-full flex-col gap-2 text-center">
            @if (!string.IsNullOrEmpty(Message))
            {
                <p class="text-center font-bold text-red-400">@Message</p>
            }
            <button class="rounded-md bg-teal-300 px-4 py-3 font-bold text-gray-50 shadow-md transition hover:bg-teal-400 active:bg-teal-200" type="submit">Login</button>
            <LoginGoogle/>
            <NavLink class="underline-offset-2 text-sm tracking-wider text-blue-500 underline" href="/forgot-password">Forgot your password?</NavLink>
        </div>
    </div>
</EditForm>

<br />

@code {
    public LoginCredentials Credentials { get; set; } = new();
    public string Message { get; set; }

    private async Task LoginAsync()
    {
        Message = "";
        LoginSuccessCheck response = await authService.LoginAsync(Credentials.Email, Credentials.Password);
        if (response.Success == true)
        {
            NavigationManager.NavigateTo("/settings");   
        }
        if (response.Success == false)
        {
            Message = "Incorrent email or password.";
        }
        StateHasChanged();
    }

    public class LoginCredentials
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string? Password { get; set; }
        
    }
}
