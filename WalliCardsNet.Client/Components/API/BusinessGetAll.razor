@* @inject HttpClient Http
@using WalliCardsNet.ClassLibrary.Business
@using WalliCardsNet.Client.Services
@inject WalliCardsApiService WalliCardsApiService

<h3>All businesses</h3>
@if (Fetching)
{
    <p>Fetching data ...</p>
}
@if (Businesses != null && Businesses.Count > 0)
{
    <table>
        <thead>
            <tr>
                <th colspan="3">Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var business in Businesses)
            {
                <tr>
                    @if (business.Id == EditBusinessId)
                    {
                        <InputText @bind-Value="business.Name" />
                        <button @onclick="() => SaveChangesAsync(business)">Save</button>
                        <button @onclick="CancelEdit">Cancel</button>
                    }
                    else
                    {
                        <p>@business.Name</p>
                    }
                    <td><button @onclick="() => EditBusiness(business.Id)">Edit</button></td>
                    <td><button @onclick="() => DeleteBusinessAsync(business.Id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    public List<BusinessDTO> Businesses { get; set; }
    public string ErrorMessage { get; set; } = "";
    public bool Fetching { get; set; } = false;
    public Guid EditBusinessId { get; set; } = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FetchBusinesses();
    }

    public async Task FetchBusinesses()
    {
        Businesses = null;
        Fetching = true;

        var response = await WalliCardsApiService.GetAllAsync<List<BusinessDTO>>("Business");
        if (response.IsSuccess)
        {
            Businesses = response.Data;
        }
        else
        {
            ErrorMessage = response.Message;
        }
        Fetching = false;
        StateHasChanged();
    }

    public void EditBusiness(Guid businessId)
    {
        EditBusinessId = businessId;
    }

    public void CancelEdit()
    {
        EditBusinessId = Guid.Empty;
    }

    public async Task SaveChangesAsync(BusinessDTO business)
    {
        var response = await WalliCardsApiService.PutAsync<BusinessDTO>("Business", business);
        if (response.IsSuccess)
        {
            EditBusinessId = Guid.Empty;
            StateHasChanged();
        }
        else
        {
            ErrorMessage = $"{response.Message} {business.Name}";
        }
    }

    public async Task DeleteBusinessAsync(Guid id)
    {
        var response = await WalliCardsApiService.DeleteAsync<BusinessDTO>("Business", id);
        if (response.IsSuccess)
        {
            EditBusinessId = Guid.Empty;
            await FetchBusinesses();
            StateHasChanged();
        }
        else
        {
            ErrorMessage = $"Something went wrong";
        }
    }
} *@